pipeline {
    agent any
    
    environment {
        SONARQUBE_ENV = 'Sonar Local'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Descargando el cÃ³digo desde GitHub...'
                git branch: 'master', url: 'https://github.com/ivanloav/threepoints_devops_webserver.git'
            }
        }

        stage('Parallel Steps') {
            parallel {
                stage('Pruebas de SAST') {
                    steps {
                        withSonarQubeEnv(SONARQUBE_ENV) {
                            sh '''
                                docker run --rm \
                                -e SONAR_HOST_URL="http://192.168.50.50:9000" \
                                -e SONAR_LOGIN="sqp_c895d1c73c8eea74bf1fe9d434189420d48eea4b" \
                                -v $(pwd):/usr/src \
                                sonarsource/sonar-scanner-cli \
                                -Dsonar.projectKey=practica_1_2024_IVAN \
                                -Dsonar.sources=/usr/src \
                                -Dsonar.host.url=http://192.168.50.50:9000 \
                                -Dsonar.login=sqp_c895d1c73c8eea74bf1fe9d434189420d48eea4b
                            '''
                        }
                    }
                }

                stage('Imprimir Env') {
                    steps {
                        echo "El workspace es: ${env.WORKSPACE}"
                    }
                }
            }
        }

        stage('Configurar archivo') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'Credentials_Threepoints', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        sh """
                            echo '[credentials]' > credentials.ini
                            echo 'user=\${USER}' >> credentials.ini
                            echo 'password=\${PASS}' >> credentials.ini
                        """
                    }
                }
                archiveArtifacts artifacts: 'credentials.ini'
            }
        }

        stage('Build') {
            steps {
                echo 'Construyendo el contenedor Docker...'
                sh 'docker build -t devops_ws .'
            }
        }
    }

    post {
        success {
            echo 'Pipeline ejecutado exitosamente.'
        }
        failure {
            echo 'Hubo un fallo en el pipeline.'
        }
    }
}