pipeline {
    agent any

    environment {
        SONARQUBE_ENV = 'Sonar Local'
    }

    tools {
        sonarQubeScanner 'sonar-scanner' // Usar el nombre que diste en la configuraci칩n
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Descargando el c칩digo desde GitHub...'
                git branch: 'master', url: 'https://github.com/ivanloav/threepoints_devops_webserver.git'
            }
        }

        stage('Pruebas de SAST') {
            steps {
                // Ejecutar el an치lisis de SonarQube usando el esc치ner configurado
                withSonarQubeEnv(SONARQUBE_ENV) {
                    sh 'sonar-scanner -Dsonar.projectKey=practica_1_2024_IVAN -Dsonar.sources=src -Dsonar.host.url=http://192.168.1.56:9000 -Dsonar.login=sqp_c895d1c73c8eea74bf1fe9d434189420d48eea4b'
                }
            }
        }

        stage('Configurar archivo') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'Credentials_Threepoints', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        sh """
                            echo '[credentials]' > credentials.ini
                            echo 'user=\${USER}' >> credentials.ini
                            echo 'password=\${PASS}' >> credentials.ini
                        """
                    }
                }
                archiveArtifacts artifacts: 'credentials.ini'
            }
        }

        stage('Build') {
            steps {
                echo 'Construyendo el contenedor Docker...'
                sh 'docker build -t devops_ws .'
            }
        }
    }

    post {
        success {
            script {
                timeout(time: 5, unit: 'MINUTES') {
                    def qualityGate = waitForQualityGate(abortPipeline: false)
                    if (qualityGate.status != 'OK') {
                        echo "Quality Gate failed: ${qualityGate.status}"
                    } else {
                        echo "Quality Gate passed successfully"
                    }
                }
            }
        }
        failure {
            echo 'Hubo un fallo en el pipeline.'
        }
    }
}
